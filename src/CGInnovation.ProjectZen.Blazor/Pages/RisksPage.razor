@page "/risks"

@using Volo.Abp.Application.Dtos
@using CGInnovation.ProjectZen.Risks
@using CGInnovation.ProjectZen.Localization
@using Microsoft.Extensions.Localization
@using CGInnovation.ProjectZen.Permissions
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(ProjectZenPermissions.Risks.Default)]

@inject IStringLocalizer<ProjectZenResource> L
@inject AbpBlazorMessageLocalizerHelper<ProjectZenResource> LH

@inherits AbpCrudPageBase<IRiskAppService, RiskDto, Guid,
PagedAndSortedResultRequestDto, CreateUpdateRiskDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Risks"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">

                @*
                    @if (HasCreatePermission)
                    {
                *@

                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    @L["Add Risk"]
                </Button>

                @*
                    }
                *@
            </Column>
        </Row>
    </CardHeader>

    <CardBody>
        <DataGrid TItem="RiskDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="RiskDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="RiskDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="RiskDto"
                                          Text="@L["Edit"]"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="RiskDto"
                                          Text="@L["Delete"]"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                        </EntityActions>

                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="RiskDto"
                                Field="@nameof(RiskDto.Name)"
                                Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="RiskDto"
                                Field="@nameof(RiskDto.Occures)"
                                Caption="@L["Occures"]">
                </DataGridColumn>
                <DataGridColumn TItem="RiskDto"
                                Field="@nameof(RiskDto.OccuredDate)"
                                Caption="@L["Occured Date"]">
                    <DisplayTemplate>
                        @context.OccuredDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RiskDto"
                                Field="@nameof(RiskDto.Mitigation)"
                                Caption="@L["Mitigation"]">
                </DataGridColumn>
                <DataGridColumn TItem="RiskDto"
                                Field="@nameof(RiskDto.Impact)"
                                Caption="@L["Impact"]">
                </DataGridColumn>
                <DataGridColumn TItem="RiskDto"
                                Field="@nameof(RiskDto.Likelihood)"
                                Caption="@L["Likelihood"]">
                </DataGridColumn>
@*                <DataGridColumn TItem="RiskDto"
                                Field="@nameof(RiskDto.CreationTime)"
                                Caption="@L["Creating time"]">
                </DataGridColumn>
                <DataGridColumn TItem="RiskDto"
                                Field="@nameof(RiskDto.LastModificationTime)"
                                Caption="@L["Modification time"]">
                </DataGridColumn>
*@
            </DataGridColumns>
        </DataGrid>
    </CardBody>

</Card>

<Modal @ref="@CreateModal">
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["New Risk"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Mitigation"]</FieldLabel>
                        <Select TValue="Mitigation" @bind-SelectedValue="@NewEntity.Mitigation">
                            @foreach (Mitigation riskMitigationValue in Enum.GetValues(typeof(Mitigation)))
                            {
                                <SelectItem TValue="Mitigation" Value="@((Mitigation) riskMitigationValue)">
                                    @L[$"{riskMitigationValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Occured date"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="NewEntity.OccuredDate" />
                    </Field>
                    <Field>
                        <Check TValue="bool" @bind-Checked="NewEntity.Occures">Occures</Check>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Impact"]</FieldLabel>
                        <Select TValue="Impact" @bind-SelectedValue="@NewEntity.Impact">
                            @foreach (Impact riskImpactValue in Enum.GetValues(typeof(Impact)))
                            {
                                <SelectItem TValue="Impact" Value="@((Impact) riskImpactValue)">
                                    @L[$"{riskImpactValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                </Validations>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="@EditModal">
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Mitigation"]</FieldLabel>
                        <Select TValue="Mitigation" @bind-SelectedValue="@EditingEntity.Mitigation">
                            @foreach (Mitigation riskMitigationValue in Enum.GetValues(typeof(Mitigation)))
                            {
                                <SelectItem TValue="Mitigation" Value="@((Mitigation) riskMitigationValue)">
                                    @L[$"{riskMitigationValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    @*<Field>
                        <FieldLabel>@L["PublishDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="EditingEntity.PublishDate"/>
                        </Field>
                        <Field>
                        <FieldLabel>@L["Price"]</FieldLabel>
                        <NumericEdit TValue="float" @bind-Value="EditingEntity.Price"/>
                        </Field>
                    *@
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


@code {
    protected override async Task OnInitializedAsync()
    {
#if DEBUG
    await Task.Delay(0);
#endif
    }

    public RisksPage() // Constructor
    {
        CreatePolicyName = ProjectZenPermissions.Risks.Create;
        UpdatePolicyName = ProjectZenPermissions.Risks.Edit;
        DeletePolicyName = ProjectZenPermissions.Risks.Delete;
    }
}
